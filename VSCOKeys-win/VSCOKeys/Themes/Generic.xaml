<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:view_model="clr-namespace:VSCOKeys.ViewModel">

    <view_model:BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
    <view_model:BooleanToImageConverter x:Key="booleanToImageConverter"/>
    <view_model:UuidPdfToVisibilityConverter x:Key="uuidPdfToVisibilityConverter"/>
    <view_model:BooleanToIsActiveImageConverter x:Key="booleanToIsActiveImageConverter"/>
    <view_model:NameMatchToVisibilityConverter x:Key="nameMatchToVisibilityConverter" />
    <view_model:AllVisibleToVisibilityConverter x:Key="allVisibleToVisibilityConverter" />
    <view_model:AmountToColorConverter x:Key="amountToColorConverter" />
    <view_model:BooleanToActivateTextConverter x:Key="booleanToActivateTextConverter" />
    <view_model:BooleanToActivateTextColorConverter x:Key="booleanToActivateTextColorConverter"/>
    <view_model:DownloadToTextConverter x:Key="downloadToTextConverter" />
    <view_model:DownloadToWidthConverter x:Key="downloadToWidthConverter" />
    
    <Style x:Key="proximaText">
        <Setter Property="TextElement.FontFamily" Value="pack://application:,,,/Resources/Font/#Proxima Nova VSCO" />
        <Setter Property="TextElement.FontStretch" Value="ExtraExpanded" />
    </Style>

    <Style x:Key="proximaBig" BasedOn="{StaticResource proximaText}">
        <Setter Property="TextElement.FontSize" Value="14" />
    </Style>

    <SolidColorBrush x:Key="NormalBrush" Color="#343434" />
    <SolidColorBrush x:Key="MouseOverBrush" Color="Gray" />

    <Style x:Key="simpleButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                        <!-- The bindings are useful so that the control can be parameterized without editing the template -->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>

                    <!--Each state sets a brush on the Border in the template -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="licenseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource simpleButton}">
        <Setter Property="TextElement.FontFamily" Value="pack://application:,,,/Resources/Font/#Proxima Nova VSCO" />
        <Setter Property="TextElement.FontSize" Value="12"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Height" Value="37"/>
    </Style>

    <Style x:Key="licenseError" TargetType="{x:Type Label}" BasedOn="{StaticResource proximaText}">
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="TextElement.FontSize" Value="16" />
    </Style>

    <ControlTemplate x:Key="underlineLinkTemplate" TargetType="{x:Type Button}">
        <TextBlock x:Name="innerText" Foreground="DarkGray" TextDecorations="Underline" Cursor="Hand" VerticalAlignment="Center" >
            <ContentPresenter />
        </TextBlock>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
                <Setter TargetName="innerText" Property="Foreground" Value="Gray" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="underlineLink" TargetType="{x:Type Button}">
        <Setter Property="TextElement.FontSize" Value="10" />
        <Setter Property="Template" Value="{StaticResource underlineLinkTemplate}" />
    </Style>

    <ControlTemplate x:Key="redUnderlineLinkTemplate" TargetType="{x:Type Button}">
        <TextBlock x:Name="innerText" Foreground="Red" TextDecorations="Underline" Cursor="Hand" VerticalAlignment="Center" >
            <ContentPresenter />
        </TextBlock>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
                <Setter TargetName="innerText" Property="Foreground" Value="DarkRed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="redUnderlineLink" TargetType="{x:Type Button}">
        <Setter Property="TextElement.FontSize" Value="10" />
        <Setter Property="Template" Value="{StaticResource redUnderlineLinkTemplate}" />
    </Style>


    <Style x:Key="invisButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                        <!-- The bindings are useful so that the control can be parameterized without editing the template -->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="mainTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="keyfileListButton"  TargetType="Button" BasedOn="{StaticResource invisButton}">
        <Setter Property="TextElement.FontFamily" Value="pack://application:,,,/Resources/Font/#Proxima Nova VSCO" />
    </Style>

    <Style x:Key="keyfileListBox" TargetType="{x:Type ListBox}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ScrollViewer Margin="0" Style="{DynamicResource SimpleScrollViewer}" Focusable="false" Background="{TemplateBinding Background}">
                            <StackPanel Margin="0" IsItemsHost="true"/>
                        </ScrollViewer>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="#eee" BorderThickness="0,0,0,1">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="#343434" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsSelected" Value="True" />
                            <Setter Property="Foreground" Value="White" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="50" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="180" />
                                <ColumnDefinition Width="100" />
                            </Grid.ColumnDefinitions>
                            <Button Style="{StaticResource invisButton}" Grid.Column="0" Command="{Binding Path=DataContext.ToggleActiveCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Padding="18" >
                                <Button.Content>
                                    <Image Width="12" Height="12" Source="{Binding Path=isActive, Converter={StaticResource booleanToIsActiveImageConverter}}"/>
                                </Button.Content>
                            </Button>
                            <Button Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Padding="18" HorizontalContentAlignment="Left" Style="{StaticResource invisButton}" Grid.Column="1" Content="{Binding name}" Command="{Binding Path=DataContext.OpenCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"/>
                            <Button Style="{StaticResource keyfileListButton}" Padding="18" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Grid.Column="2" Content="SHOW PDF LAYOUT" Command="{Binding Path=DataContext.ShowPdfCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
                                <Button.Visibility>
                                    <MultiBinding Converter="{StaticResource uuidPdfToVisibilityConverter}">
                                        <Binding Path="DataContext.KeyControl" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}"/>
                                        <Binding Path="uuid"/>
                                        <Binding Path="IsSelected" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}"/>
                                    </MultiBinding>
                                </Button.Visibility>
                            </Button>
                            <Button 
                                Style="{StaticResource keyfileListButton}" Padding="18" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" 
                                Grid.Column="3" 
                                Content="DELETE" 
                                Command="{Binding Path=DataContext.ConfirmCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
                                Visibility="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}, Converter={StaticResource booleanToVisibilityConverter}}"/>
                        </Grid>
                        <Border Background="Red">
                            <Border.Visibility>
                                <MultiBinding Converter="{StaticResource nameMatchToVisibilityConverter}">
                                    <Binding Path="uuid" />
                                    <Binding Path="DataContext.NameToDelete" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" />
                                </MultiBinding>
                            </Border.Visibility>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="200" />
                                    <ColumnDefinition Width="50" />
                                    <ColumnDefinition Width="80" />
                                </Grid.ColumnDefinitions>
                                <Label Margin="10,0,0,0" Content="{Binding name}" Grid.Column="0" Foreground="White" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" VerticalAlignment="Stretch" VerticalContentAlignment="Center" />
                                <Label Content="DELETE THIS KEYBOARD?" Grid.Column="1" Style="{StaticResource proximaText}" Foreground="White" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" VerticalAlignment="Stretch" VerticalContentAlignment="Center" />
                                <Button Style="{StaticResource keyfileListButton}" Foreground="White" Grid.Column="2" Content="OK" Command="{Binding Path=DataContext.DeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"/>
                                <Button Style="{StaticResource keyfileListButton}" Foreground="White" Grid.Column="3" Content="CANCEL" Command="{Binding Path=DataContext.HideConfirmCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"/>
                            </Grid>
                        </Border>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="commandField" TargetType="TextBlock" BasedOn="{StaticResource proximaText}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <Style x:Key="commandListBox" TargetType="{x:Type ListBox}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border BorderThickness="0,0,0,1" BorderBrush="LightGray" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Background="#fefefe">
                            <TextBlock Text="{Binding Command}" Style="{StaticResource commandField}" FontFamily="Courier New"/>
                        </Border>
                        <Border Grid.Column="1" Background="#f5f5f5">
                            <TextBlock Text="{Binding Adjustment}" Style="{StaticResource commandField}"/>
                        </Border>
                        <Border Grid.Column="2" Background="#f0f0f0">
                            <TextBlock Text="{Binding Amount}" Foreground="{Binding Amount, Converter={StaticResource amountToColorConverter}}" Style="{StaticResource commandField}"/>
                        </Border>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="detailButton" TargetType="{x:Type Button}" BasedOn="{StaticResource simpleButton}">
        <Setter Property="TextElement.FontFamily" Value="pack://application:,,,/Resources/Font/#Proxima Nova VSCO" />
        <Setter Property="TextElement.FontSize" Value="12"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Padding" Value="20,10,10,10"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Height" Value="37"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
    </Style>

    <LinearGradientBrush x:Key="insetGradient" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF6E6E6E" Offset="0"/>
        <GradientStop Color="#FFA5A5A5" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="searchTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" Background="White" BorderBrush="{StaticResource insetGradient}" BorderThickness="1" Padding="2" CornerRadius="8">

                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="quickCommandField" TargetType="TextBlock" BasedOn="{StaticResource commandField}">
        <Setter Property="Padding" Value="2"/>
    </Style>

    <Style x:Key="quickCommandListBox" TargetType="{x:Type ListBox}" BasedOn="{StaticResource commandListBox}">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border BorderThickness="0,0,0,1" BorderBrush="Black" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="110"/>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="110"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0">
                            <TextBlock Text="{Binding Command}" Style="{StaticResource quickCommandField}" FontFamily="Courier New" FontSize="10"/>
                        </Border>
                        <Border Grid.Column="1">
                            <TextBlock Text="{Binding Adjustment}" Style="{StaticResource quickCommandField}" FontSize="10"/>
                        </Border>
                        <Border Grid.Column="2">
                            <TextBlock Text="{Binding Amount}" Foreground="{Binding Amount, Converter={StaticResource amountToColorConverter}}" Style="{StaticResource quickCommandField}" FontSize="10"/>
                        </Border>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>